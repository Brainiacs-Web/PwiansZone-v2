const mongoose = require('mongoose');
const { Schema } = mongoose;

/**
 * Question subdocument schema.
 * Each question will have its own autogenerated ObjectId (`_id`).
 */
const QuestionSchema = new Schema({
  question:      { type: String, required: true, trim: true },
  questionImage: { type: String, default: '' },
  questionType:  { type: String, enum: ['MCQ', 'Integer'], required: true },
  options:       { type: [String], default: [] },      // for MCQ only
  correctAnswer: { type: String, default: '' },        // “A”/“B”/“C”/“D” when MCQ
  answer:        { type: String, default: '' },        // numeric (string) when Integer
  solution:      { type: String, default: '' },
  solutionImage: { type: String, default: '' },
  updatedAt:     { type: Date, default: Date.now }
}, { _id: true });

/**
 * Subject subdocument schema.
 * Each subject has a `name` and an array of embedded QuestionSchema.
 */
const SubjectSchema = new Schema({
  name:      { type: String, required: true, trim: true },
  questions: { type: [QuestionSchema], default: [] }
}, { _id: false });

/**
 * Test document schema.
 * - `code` (unique identifier, e.g. “TST001”)
 * - `testName` (human‐readable title)
 * - `batch` (ObjectId → Batch collection)
 * - `testDuration`, `subjects` (array of subject names), `scheduledAt`, etc.
 * - We embed `subjects` as an array of SubjectSchema (each holds its own questions).
 */
const TestSchema = new Schema({
  code:         { type: String, required: true, unique: true, trim: true },
  testName:     { type: String, required: true, trim: true },
  batch:        { type: mongoose.Schema.Types.ObjectId, ref: 'Batch', required: true },
  testDuration: { type: Number, required: true },
  // Keep a flat array of subject names for “populate dropdown” scenarios.
  subjects:     { type: [String], default: [] },
  // But also store a full subdocument array so that each subject can hold its questions:
  subjectDocs:  { type: [SubjectSchema], default: [] },
  scheduledAt:  { type: Date, default: null },
  published:    { type: Boolean, default: false },
  createdAt:    { type: Date, default: Date.now },
  publishedAt:  { type: Date, default: null }
}, {
  timestamps: true
});

module.exports = mongoose.model('Test', TestSchema);
